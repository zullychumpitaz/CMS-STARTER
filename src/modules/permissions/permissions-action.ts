"use server";

import { revalidatePath } from "next/cache";
import { auth } from "@/modules/auth/auth";
import { logAction } from "@/modules/logs/logs-actions";
import { accionesLog } from "@/modules/logs/logs-types";
import { prisma } from "@/modules/database/prisma"; // Import prisma
import { PermissionFormValues } from "./permissions-validations"; // Import the type

export async function createPermission(data: PermissionFormValues) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }

  try {
    await prisma.permission.create({
      data: {
        name: data.name,
        description: data.description,
        category: data.category,
      },
    });

    await logAction({
      action: accionesLog.CREATE,
      entity: "Permiso",
      entityId: "N/A", // ID will be generated by DB
      performedBy: session.user.id,
      details: { reason: "Permiso creado desde CMS" },
    });

    revalidatePath("/permissions");
    return { success: true };
  } catch (error) {
    console.error("Error al crear el permiso:", error);
    await logAction({
      action: accionesLog.CREATE,
      entity: "Permiso",
      entityId: "N/A",
      performedBy: session.user.id,
      details: { reason: error instanceof Error ? error.message : String(error) },
    });
    throw new Error("No se pudo crear el permiso.");
  }
}

export async function updatePermission(permissionId: string, data: PermissionFormValues) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  if (!permissionId) throw new Error("ID del permiso requerido.");

  try {
    await prisma.permission.update({
      where: { id: permissionId },
      data: {
        name: data.name,
        description: data.description,
        category: data.category,
      },
    });

    await logAction({
      action: accionesLog.EDIT,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: "Permiso actualizado desde CMS" },
    });

    revalidatePath("/permissions");
    return { success: true };
  } catch (error) {
    console.error("Error al actualizar el permiso:", error);
    await logAction({
      action: accionesLog.EDIT,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: error instanceof Error ? error.message : String(error) },
    });
    throw new Error("No se pudo actualizar el permiso.");
  }
}

export async function deletePermission(permissionId: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  if (!permissionId) throw new Error("ID del permiso requerido.");

  try {
    await prisma.permission.update({
      where: { id: permissionId },
      data: {
        deletedAt: new Date(),
      },
    });

    await logAction({
      action: accionesLog.DELETE,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: "Permiso eliminado desde CMS" },
    });

    revalidatePath("/permissions");
    return { success: true };
  } catch (error) {
    console.error("Error al eliminar el permiso:", error);
    await logAction({
      action: accionesLog.DELETE,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: error instanceof Error ? error.message : String(error) },
    });
    throw new Error("No se pudo eliminar el permiso.");
  }
}

export async function restorePermission(permissionId: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  if (!permissionId) throw new Error("ID del permiso requerido.");

  try {
    await prisma.permission.update({
      where: { id: permissionId },
      data: {
        deletedAt: null,
        isActive: true,
      },
    });

    await logAction({
      action: accionesLog.EDIT,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: "Permiso restaurado desde CMS" },
    });

    revalidatePath("/permissions");
    return { success: true };
  } catch (error) {
    console.error("Error al restaurar el permiso:", error);
    await logAction({
      action: accionesLog.EDIT,
      entity: "Permiso",
      entityId: permissionId,
      performedBy: session.user.id,
      details: { reason: error instanceof Error ? error.message : String(error) },
    });
    throw new Error("No se pudo restaurar el permiso.");
  }
}

export async function getPermissionById(permissionId: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  if (!permissionId) throw new Error("ID del permiso requerido.");

  try {
    const permission = await prisma.permission.findUnique({
      where: { id: permissionId },
    });
    return permission;
  } catch (error) {
    console.error("Error al obtener el permiso por ID:", error);
    throw new Error("No se pudo obtener el permiso.");
  }
}

export async function getPermissionByName(permissionName: string) {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  if (!permissionName) throw new Error("Nombre del permiso requerido.");

  try {
    const permission = await prisma.permission.findUnique({
      where: { name: permissionName },
    });
    return permission;
  } catch (error) {
    console.error("Error al obtener el permiso por ID:", error);
    throw new Error("No se pudo obtener el permiso.");
  }
}

export async function getPermissions() {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }
  const userRole = session?.user?.rol;

  const whereClause: { deletedAt?: Date | null } = {};
  if (userRole !== "Super Administrador") {
    whereClause.deletedAt = null;
  }

  try {
    const permissions = await prisma.permission.findMany({
      where: whereClause,
      include: {
        roles: {
          include: {
            role: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });
    return permissions;
  } catch (error) {
    console.error("Error al obtener los permisos:", error);
    throw new Error("No se pudieron obtener los permisos.");
  }
}

export async function getPermissionsAsOptions() {
  const session = await auth();
  if (!session || !session.user || !session.user.id) {
    throw new Error("User session not found.");
  }

  try {
    const permissions = await prisma.permission.findMany({
      where: {
        deletedAt: null, // Always filter out deleted permissions for options
      },
      select: {
        id: true,
        name: true,
      },
      orderBy: { name: "asc" }, // Keep order by name for better UX
    });
    return permissions.map((p: any) => ({ label: p.name, value: p.id }));
  } catch (error) {
    console.error("Error al obtener los permisos como opciones:", error);
    throw new Error("No se pudieron obtener los permisos como opciones.");
  }
}